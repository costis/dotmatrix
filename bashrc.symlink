# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias less='less -R'
alias tmux='tmux -2'
alias be='bundle exec'
alias g='git'
alias dirs='dirs -v'
alias npm-exec='PATH=$(npm bin):$PATH'

# tmux aliases
alias tml='tmux ls'
alias tma='tmux attach -t $1'
alias tmc='tmux new-session -s $1'

# easy open
function o { xdg-open "$@";}

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# Editor, Browser etc
export EDITOR=vim
export BROWSER=/usr/bin/google-chrome

bind -m vi-insert "C-l":clear-screen

[[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] && source $HOME/.tmuxinator/scripts/tmuxinator

git_has_stash() {
  if [[ -n $(git stash list 2> /dev/null) ]]; then
    echo "★"
  else
    echo ""
  fi
}

git_dirty() {
  st=$(git status 2>/dev/null | tail -n 1)
  if [[ $st != "nothing to commit, working directory clean" ]]; then
    echo " ✗"
  else
    echo " ✓"
  fi
}

get_git_branch() {
  local br=$(git branch 2> /dev/null | grep "*" | sed 's/* //g')
  [ -n "$br" ] && echo "[@$br$(git_has_stash)$(git_dirty)]"
}

_get_rvm_prompt(){
  if hash rvm-prompt 2> /dev/null; then
    echo "[$(rvm-prompt v g)]"
  else
    echo ""
  fi
}

export PS1='\u@\h:\w\[\033[34m\]$(get_git_branch)\[\033[0m\]\[\033[36m\]$(_get_rvm_prompt)\[\033[0m\]$ '

# Load env vars with credentials for web apps
if [ -f ~/.dev_vars ]; then
    . ~/.dev_vars
fi

# export LESSOPEN="| /usr/share/source-highlight/src-hilite-lesspipe.sh %s"
# export LESS=' -R '

# Easily switch to project directories
function cpd() {
  if (( $# > 0 )); then
    folders=($(find ~/projects -maxdepth 1 -type d -iname *$1* ))
    if [ ${#folders[@]} -eq 1  ]; then
      pushd ${folders[0]} 1> /dev/null
    elif [ ${#folders[@]} -eq 0 ]; then
      folders=($(find ~/projects -type d -maxdepth 1))
    fi
  else
    folders=($(find ~/projects -type d -maxdepth 1))
  fi

  while [ ${#folders[@]} -gt 1 ]; do
    # display a selection menu
    i=0
    for f in ${folders[@]}; do
      echo " " $i - ${f##*/}
      ((i++))
    done
    read -p "Select project: " user_input

    # selection by number?
    if [[ $user_input =~ ^[0-9]+$ ]]; then
      d=${folders[$user_input]}
      pushd ~/projects/${d##*/} 1> /dev/null
      break
    # user has entered a string. Search again.
    else
      folders=($(find ~/projects -name *$user_input* -type d -maxdepth 1))
      if [[ ${#folders[@]} -eq 1 ]]; then
        pushd ${folders[0]} 1> /dev/null
        break
      fi
    fi
  done

  return 0
}

# Bash Vi mode
set -o vi
# ^l clear screen
bind -m vi-insert "\C-l":clear-screen

# ^p check for partial match in history
bind -m vi-insert "\C-p":previous-history

# ^n cycle through the list of partial matches
bind -m vi-insert "\C-n":next-history

# bind -m vi-insert "\C-p":dynamic-complete-history
# bind -m vi-insert "\C-n":menu-complete

# set PATH to include user's private bin, if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

if [ -d "$HOME/.npm" ] ; then
    PATH="$HOME/.npm/bin:$PATH"
fi

# rebind re-attached tmux window to ssh-agent
function tmux-rebind() {
  eval $(tmux show-environment | grep SSH_AUTH | sed -e '/^-/d')
}
alias tmr=tmux-rebind

function tmux-rebind2(){
  export SSH_AUTH_SOCK=$(find /tmp/ssh-* -user `whoami` -name agent\* -printf '%T@ %p\n' 2>/dev/null | sort -k 1nr | sed 's/^[^ ]* //' | head -n 1)
  if $(ssh-add -l > /dev/null) ; then
    echo Found working SSH Agent:
    ssh-add -l
    return
  fi
  echo Cannot find ssh agent - maybe you should reconnect and forward it?
}

# Ruby RVM
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

# Platform specific settings. It is linked from ~/.dotfiles/osx_only or ~/.dotfiles/linux_only
if [[ -f $HOME/.bash.local ]] ; then
  . $HOME/.bash.local
fi
