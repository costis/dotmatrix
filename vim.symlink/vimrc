set nocompatible
filetype off
filetype plugin indent off

" set the runtime path to include Vundle and initialize

call plug#begin('~/.vim/plugged')
Plug 'kien/ctrlp.vim'
Plug 'Townk/vim-autoclose'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'godlygeek/tabular'
Plug 'majutsushi/tagbar'
Plug 'tomtom/tcomment_vim'
Plug 'rking/ag.vim'
Plug 'bling/vim-airline'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'gregsexton/gitv'
Plug 'jelera/vim-javascript-syntax'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-surround'
Plug 'kana/vim-textobj-user'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'd11wtq/ctrlp_bdelete.vim'
Plug 'justinmk/vim-gtfo'
Plug 'epeli/slimux'
Plug 'pangloss/vim-javascript'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'terryma/vim-multiple-cursors'
Plug 'vim-scripts/dbext.vim'
Plug 'fatih/vim-go'
Plug 'mtth/scratch.vim'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'mattn/emmet-vim'
Plug 'schickling/vim-bufonly'
Plug 'janko-m/vim-test'
Plug 'embear/vim-localvimrc'
call plug#end()

filetype plugin indent on

" set t_Co=256
set background=dark
set colorcolumn=100

colorscheme lucius

syntax on
" set foldmethod=syntax

" enable matchit.vim for rubytext-block
runtime macros/matchit.vim

set nowrap "disable wrapping
set hidden "you can change buffers without saving
set expandtab
set tabstop=2
set shiftwidth=2
set bs=2
set number "show numbers
set showcmd "show partial command you are typing
set smarttab
set autoindent

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" put all vim's temporary file out of current dir
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" set the leader key
let mapleader = ","

" Keymaps
nnoremap <c-c> <ESC> " alternative ESCAPE
inoremap jj <ESC>
nmap <F3> :cn<CR> " find next occurance after vimgrep
nmap <F4> :cp<CR> " find previous occurance after vimgrep

let test#strategy = "basic"
" vim-test bindings
nmap <leader>X :TestNearest<CR>
nmap <leader>x :TestFile<CR>
nmap <leader>xs :TestSuite<CR>
nmap <leader>xl :TestLast<CR>
"nmap <silent> <leader>g :TestVisit<CR>

" let g:no_turbux_mappings = 1
" map <leader>x <Plug>SendTestToTmux
" map <leader>X <Plug>SendFocusedTestToTmux

" Turbux should use drb by default
" let g:turbux_command_prefix = 'bundle exec'
" let g:turbux_command_cucumber  = 'cucumber --drb'
" let g:turbux_command_rspec     = 'rspec -f d'
" let g:turbux_command_test_unit = 'ruby -Itest'
"
 "change default cursor keys to work on visual not actual lines

nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

if has("gui_running")
  " If the current buffer has never been saved, it will have no name,
  " call the file browser to save it, otherwise just save it.
  :map <silent> <C-S> :if expand("%") == ""<CR>:browse confirm w<CR>:else<CR>:confirm w<CR>:endif<CR>
endif

" Toggle invisible characters
nmap <silent> <Leader>l :set list!<CR>

" CtrlP in open buffer mode
map <silent> <Leader>t :CtrlPBuffer<CR>
map <silent> <Leader>m :CtrlPMRU<CR>

" Preview Markdown files
map <leader>P :Mm<CR>

" Send to REPL
map <Leader>s :SlimuxREPLSendLine<CR>
vmap <Leader>s :SlimuxREPLSendSelection<CR>

" Status Line
set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]

" statusline support for syntactic plugin
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Statusline always visible
set laststatus=2

" Close NERDTree when opening a file
let g:NERDTreeQuitOnOpen = 1

" Size of window
let g:NERDTreeWinSize = 40

" Enable syntastic syntax checking
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" don't forget to install with 'npm install jsxhint -g'
let g:syntastic_javscript_checkers = ['jsxhint']

" For vimdiff
set diffopt=filler
" set diffopt+=iwhite

" For ctrlp plugin to ignore files
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*

" Diff changes for opened file
if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
          \ | wincmd p | diffthis
endif

" VSplit open pane to the right
set splitright

" Split open pane below
set splitbelow

" Remove trailing whitespace from code files on save
function! StripTrailingWhitespace()
  " store current cursor location
  silent exe "normal ma<CR>"
  " store the current search value
  let saved_search = @/
  " delete the whitespace (e means don't warn if pattern not found)
  %s/\s\+$//e
  " restore old cursor location
  silent exe "normal `a<CR>"
  " restore the search value
  let @/ = saved_search
endfunction


if has('autocmd')
  augroup autocommandbots
    autocmd!
    " Remove trailing whitespace from various files
    autocmd BufWritePre,FileWritePre *.html,*.rb,*.php,*.xml,*.erb,*.rhtml call StripTrailingWhitespace()
    autocmd Filetype coffee,ruby,yaml,rake,rb,ru,javascript setlocal ts=2 sw=2 expandtab
    autocmd BufNewFile,BufRead {*.rake,Podfile,Gemfile,Guardfile,Capfile,Rakefile,Thorfile,config.ru} set ft=ruby
    autocmd BufNewFile,BufRead Gemfile.lock set ft=yaml
    autocmd BufNewFile,BufRead *.json set ft=javascript
    autocmd BufNewFile,BufRead *.prawn set ft=ruby
    autocmd BufNewFile,BufRead *.go set ft=go
  augroup END
endif

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Vimux should not open new panes
let g:VimuxUseNearestPane = 1

" HTML Indentation config
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style = "inc"

" Generate tags for Ruby projects with Bundler support.
" Generates for all  Gemfile gems.
map rt :execute "!bundle list --paths=true \| xargs ctags --extra=+f --exclude=.git --exclude=log -R *"<CR>

" Set highlight for
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
hi NonText ctermfg=7 guifg=gray
hi SpecialKey ctermfg=7 guifg=gray

" Don't display buffer line inside command bar, 'airline' will show it.
let g:bufferline_echo=0

" TagBar
let g:tagbar_autofocus = 1
nnoremap <silent>2 :TagbarToggle<CR>

" Don't allow gitgutter to update in realtime.
let g:gitgutter_realtime = 0

" Deleting buffers in CtrlP, with a plugin
call ctrlp_bdelete#init()

nnoremap <leader>1 :NERDTreeToggle<CR>
nnoremap <leader>! :NERDTreeFind<CR>

let g:indent_guides_guide_size = 1
let g:ycm_auto_trigger = 0

" Search with silver searcher
nmap K :Ag "\b<C-R><C-W>\b"<CR>

" Syntastic
let g:syntastic_eruby_ruby_quiet_messages = {'regex': 'useless use of a variable in void context'}

nnoremap <Leader>wq :close<CR>
nnoremap <Leader>ws :split<CR>
nnoremap <Leader>wvs :vert<CR>
nnoremap <Leader>wo :only<CR>

" Ruby options
let g:ruby_indent_access_modifier_style = 'indent'

" Project specific settings
if filereadable('.vimrc.local')
  source .vimrc.local
endif

" scratch.vim settings
let g:scratch_insert_autohide = 0

" fugitive: checkout modified file with 'U'
au FileType gitcommit nmap <buffer> U :Git checkout -- <c-r><c-g><cr>

let g:notes_directories = ['~/Copy/Notes']

" ultisnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" NERDTree : make it same as CtrlP
let NERDTreeMapOpenSplit='<c-x>'
let NERDTreeMapOpenVSplit='<c-v>'

nnoremap <leader>bw :w!<CR>

" Persist localvimrc selections
let g:localvimrc_persistent=1
